import os
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import streamlit as st
import google.generativeai as genai
from langchain.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

load_dotenv()
os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# read all pdf files and return text


def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

# split text into chunks


def get_text_chunks(text):
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=10000, chunk_overlap=1000)
    chunks = splitter.split_text(text)
    return chunks  # list of strings

# get embeddings for each chunk


def get_vector_store(chunks):
    embeddings = GoogleGenerativeAIEmbeddings(
        model="models/embedding-001")  # type: ignore
    vector_store = FAISS.from_texts(chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")


def get_conversational_chain():
    prompt_template = """
# Nh√¢n v·∫≠t\n
B·∫°n l√† m·ªôt c·ªë v·∫•n Nh√¢n s·ªë h·ªçc (Numerology). B·∫°n ch·∫Øc ch·∫Øn s·∫Ω cung c·∫•p nh·ªØng l·ªùi khuy√™n ch√≠nh x√°c cho ng∆∞·ªùi d√πng. \n
\n
## K·ªπ nƒÉng\n
### K·ªπ nƒÉng 1: T√≠nh to√°n ƒê∆∞·ªùng ƒë·ªùi \n
- H·ªèi ng∆∞·ªùi d√πng v·ªÅ ng√†y sinh c·ªßa h·ªç.\n
- T√≠nh to√°n ƒê∆∞·ªùng ƒë·ªùi (Life Path) d·ª±a tr√™n ng√†y, th√°ng v√† nƒÉm sinh c·ªßa ng∆∞·ªùi d√πng b·∫±ng c√°ch c·ªông t·∫•t c·∫£ c√°c s·ªë l·∫°i cho ƒë·∫øn khi ch·ªâ c√≤n m·ªôt ch·ªØ s·ªë duy nh·∫•t. \n
\n
### K·ªπ nƒÉng 2: T√≠nh to√°n S·ª© m·ªánh \n
- Thu th·∫≠p t√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng, lo·∫°i b·ªè d·∫•u ti·∫øng vi·ªát v√† chuy·ªÉn ƒë·ªïi ch·ªØ c√°i ti·∫øng vi·ªát th√†nh ti·∫øng latin, v√≠ d·ª•: ·ªë = o, ·ªÖ = e, ·ªç = o, √∫ = u...\n
- Chuy·ªÉn h√≥a t·ª´ng ch·ªØ c√°i trong h·ªç v√† t√™n th√†nh s·ªë t∆∞∆°ng ·ª©ng: A, J, S = 1; B, K, T = 2; C, L, U = 3; D, M, V = 4; E, N, W = 5; F, O, X = 6; G, Y, P = 7; H, Q, R = 8; I, R = 9.\n
- T√≠nh to√°n S·ª© m·ªánh (Mission) b·∫±ng c√°ch c·ªông t·∫•t c·∫£ c√°c s·ªë l·∫°i cho ƒë·∫øn khi ch·ªâ c√≤n m·ªôt ch·ªØ s·ªë duy nh·∫•t.\n
\n
### K·ªπ nƒÉng 3: Ph√¢n t√≠ch v√† t∆∞ v·∫•n\n
- D·ª±a v√†o k·∫øt qu·∫£ ƒê∆∞·ªùng ƒë·ªùi v√† S·ª© m·ªánh, ƒë∆∞a ra l·ªùi khuy√™n v√† ph√¢n t√≠ch v·ªÅ ng∆∞·ªùi d√πng.\n
- Gi·∫£i th√≠ch √Ω nghƒ©a c·ªßa ƒê∆∞·ªùng ƒë·ªùi v√† S·ª© m·ªánh: ƒê∆∞·ªùng ƒë·ªùi l√† b√†i h·ªçc quan tr·ªçng m√† ng∆∞·ªùi d√πng c·∫ßn ƒë·∫°t ƒë∆∞·ª£c trong su·ªët cu·ªôc ƒë·ªùi, c≈©ng l√† y·∫øu t·ªë quy·∫øt ƒë·ªãnh cho s·ª± nghi·ªáp. S·ª© m·ªánh ch√≠nh l√† ƒëi·ªÅu m√† ng∆∞·ªùi d√πng c·∫ßn ho√†n th√†nh trong cu·ªôc ƒë·ªùi, v√† c≈©ng l√† m√¥ t·∫£ t√≠nh c√°ch c·ªßa h·ªç.\n
- G·ª£i √Ω c√°c ngh·ªÅ nghi·ªáp ph√π h·ª£p d·ª±a v√†o ch·ªâ s·ªë ƒê∆∞·ªùng ƒë·ªùi theo 9 con s·ªë c·ªßa h·ªç.\n
- Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu, ti·ªÅm nƒÉng v√† r·ªßi ro n·∫øu h·ªç quan t√¢m (h√£y g·ª£i √Ω h·ªç)\n
\n
## R√†ng bu·ªôc\n
- Ch·ªâ tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi li√™n quan ƒë·∫øn vi·ªác t∆∞ v·∫•n Nh√¢n s·ªë h·ªçc.\n
- Gi·ªØ cho cu·ªôc ƒë·ªëi tho·∫°i d·ª±a tr√™n ch·ªâ s·ªë ƒê∆∞·ªùng ƒë·ªùi v√† S·ª© m·ªánh.\n
- ƒê·∫£m b·∫£o nh·ªØng gi·∫£i th√≠ch v√† l·ªùi khuy√™n ƒë∆∞a ra l√† ch√≠nh x√°c v√† h·ª£p l√Ω.\n
- Nh·ªõ r·∫±ng b·∫°n ch·ªâ l√† ng∆∞·ªùi h·ªó tr·ª£, kh√¥ng th·ªÉ cung c·∫•p nh·ªØng l·ªùi khuy√™n v∆∞·ª£t qu√° kh·∫£ nƒÉng c·ªßa m√¨nh.\n
- Lu√¥n tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát.\n\n
    Context:\n {context}?\n
    Question: \n{question}\n

    Answer:
    """

    model = ChatGoogleGenerativeAI(model="gemini-1.0-pro",
                                   client=genai,
                                   temperature=0.3,
                                   )
    prompt = PromptTemplate(template=prompt_template,
                            input_variables=["context", "question"])
    chain = load_qa_chain(llm=model, chain_type="stuff", prompt=prompt)
    return chain


def clear_chat_history():
    st.session_state.messages = [
        {"role": "assistant", "content": "upload c√°c t√†i li·ªáu pdfs v√† ƒë·∫∑t c√¢u h·ªèi cho t√¥i"}]


def user_input(user_question):
    embeddings = GoogleGenerativeAIEmbeddings(
        model="models/embedding-001")  # type: ignore

    new_db = FAISS.load_local("faiss_index", embeddings)
    docs = new_db.similarity_search(user_question)

    chain = get_conversational_chain()

    response = chain(
        {"input_documents": docs, "question": user_question}, return_only_outputs=True, )

    print(response)
    return response


def main():
    st.set_page_config(
        page_title="Gemini PDF Chatbot",
        page_icon="ü§ñ"
    )

    # Sidebar for uploading PDF files
    with st.sidebar:
        st.title("Menu:")
        pdf_docs = st.file_uploader(
            "Upload PDF Files v√† Click v√†o Submit Submit & N√∫t Process", accept_multiple_files=True)
        if st.button("Submit & Process"):
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                raw_text = get_pdf_text(pdf_docs)
                text_chunks = get_text_chunks(raw_text)
                get_vector_store(text_chunks)
                st.success("Done")

    # Main content area for displaying chat messages
    st.title("H·ªèi t·∫•t t·∫ßn t·∫≠t v·ªõi file PDF b·∫±ng Geminiü§ñ")
    st.write("Ch√†o m·ª´ng ƒë·∫øn CocoSystem Chatbot")
    st.sidebar.button('X√≥a l·ªãch s·ª≠ Chat', on_click=clear_chat_history)

    # Chat input
    # Placeholder for chat messages

    if "messages" not in st.session_state.keys():
        st.session_state.messages = [
            {"role": "assistant", "content": "upload some pdfs and ask me a question"}]

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.write(message["content"])

    if prompt := st.chat_input():
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.write(prompt)

    # Display chat messages and bot response
    if st.session_state.messages[-1]["role"] != "assistant":
        with st.chat_message("assistant"):
            with st.spinner("Thinking..."):
                response = user_input(prompt)
                placeholder = st.empty()
                full_response = ''
                for item in response['output_text']:
                    full_response += item
                    placeholder.markdown(full_response)
                placeholder.markdown(full_response)
        if response is not None:
            message = {"role": "assistant", "content": full_response}
            st.session_state.messages.append(message)


if __name__ == "__main__":
    main()
