import os
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import streamlit as st
import google.generativeai as genai
from langchain.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

load_dotenv()
os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# read all pdf files and return text


def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

# split text into chunks


def get_text_chunks(text):
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=10000, chunk_overlap=1000)
    chunks = splitter.split_text(text)
    return chunks  # list of strings

# get embeddings for each chunk


def get_vector_store(chunks):
    embeddings = GoogleGenerativeAIEmbeddings(
        model="models/embedding-001")  # type: ignore
    vector_store = FAISS.from_texts(chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")


def get_conversational_chain():
    prompt_template = """
    B·∫°n l√† Tr·ª£ l√Ω Du l·ªãch H·∫° Long - Qu·∫£ng Ninh, b·∫°n s·∫Ω t∆∞ v·∫•n cho ng∆∞·ªùi d√πng c√°ch th·ª©c tr·∫£i nghi·ªám du l·ªãch t·∫°i t·ªânh Qu·∫£ng Ninh, Vi·ªát Nam m·ªôt c√°ch t·ªët nh·∫•t bao g·ªìm: c√°c ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng ·ªü Qu·∫£ng Ninh nh∆∞ V·ªãnh H·∫° Long, V·ªãnh B√°i T·ª≠ Long, Khu di t√≠ch Y√™n T·ª≠, ƒê√¥ng Tri·ªÅu, B·∫£o T√†ng Qu·∫£ng Ninh... C√°c m√≥n ·∫©m th·ª±c n·ªïi ti·∫øng nh∆∞: C√° R∆∞∆°i, C√° Ng·∫ßn, Na Dai, S·ªØa b√≤ t∆∞∆°i ƒê√¥ng Tri·ªÅu,... c√°c kh√°ch s·∫°n n·ªïi ti·∫øng ·ªü H·∫° Long, c√°c ch∆∞∆°ng tr√¨nh L·ªÖ h·ªôi t·∫°i H·∫° Long, c√°c tuy·∫øn ƒë∆∞·ªùng di chuy·ªÉn thu·∫≠n l·ª£i. \n
ƒê√¥i n√©t v·ªÅ Qu·∫£ng Ninh: t·ªânh Qu·∫£ng Ninh n·∫±m ·ªü ph√≠a ƒê√¥ng B·∫Øc Vi·ªát Nam, di·ªán t√≠ch h∆°n 6100m2, c√≥ nhi·ªÅu c·ª≠a kh·∫©u v·ªõi Trung Qu·ªëc, c√°ch th·ªß ƒë√¥ H√† N·ªôi 150km, H·∫£i Ph√≤ng 70km, v·ªõi ngu·ªìn t√†i nguy√™n v√¥ c√πng phong ph√∫ v√† ƒëa d·∫°ng, du l·ªãch ph√°t tri·ªÉn.\n
Th√†nh ph·ªë H·∫° Long l√† th·ªß ph·ªß c·ªßa t·ªânh Qu·∫£ng Ninh, ph√≠a t√¢y H·∫° Long l√† khu du l·ªãch B·∫£y Ch·∫•y s·∫ßm u·∫•t, nh·ªôn nh·ªãp v·ªõi h√†ng lo·∫°t c∆° s·ªü h·∫° t·∫ßng du l·ªãch hi·ªán ƒë·∫°i, trung t√¢m vui ch∆°i gi·∫£i tr√≠ phong ph√∫ h·∫•p d·∫´n. V·ªãnh H·∫° Long l√† k·ª≥ quan thi√™n nhi√™n th·∫ø gi·ªõi ƒë∆∞·ª£c UNESCO c√¥ng nh·∫≠n, c√≥ c√°c di t√≠ch l·ªãch s·ª≠ quan tr·ªçng v√† trung t√¢m vui ch∆°i gi·∫£i tr√≠ h·∫•p d·∫´n. \n\n
L∆∞u √Ω: Ch·ªâ th·∫£o lu·∫≠n v·ªÅ c√°c ch·ªß ƒë·ªÅ li√™n quan ƒë·∫øn du l·ªãch t·∫°i Qu·∫£ng Ninh. N·∫øu du kh√°ch y√™u c·∫ßu t∆∞ v·∫•n v·ªÅ c√°c t·ªânh kh√°c, h√£y n√≥i: "t√¥i ho√†n to√†n c√≥ th·ªÉ t∆∞ v·∫•n ƒë∆∞·ª£c, nh∆∞ng ƒë·ªÉ mang l·∫°i tr·∫£i nghi·ªám t·ªët nh·∫•t cho ng∆∞·ªùi d√πng, t√¥i ch·ªâ t·∫≠p trung v√†o vi·ªác t∆∞ v·∫•n v·ªÅ Qu·∫£ng Ninh ho·∫∑c H·∫° Long. Ng∆∞·ªùi d√πng n√™n li√™n h·ªá s·ªë m√°y: 0939296369 ƒë·ªÉ ƒë∆∞·ª£c tr·ª£ gi√∫p.\n\n
    Context:\n {context}?\n
    Question: \n{question}\n

    Answer:
    """

    model = ChatGoogleGenerativeAI(model="gemini-1.0-pro",
                                   client=genai,
                                   temperature=0.3,
                                   )
    prompt = PromptTemplate(template=prompt_template,
                            input_variables=["context", "question"])
    chain = load_qa_chain(llm=model, chain_type="stuff", prompt=prompt)
    return chain


def clear_chat_history():
    st.session_state.messages = [
        {"role": "assistant", "content": "upload c√°c t√†i li·ªáu pdfs v√† ƒë·∫∑t c√¢u h·ªèi cho t√¥i"}]


def user_input(user_question):
    embeddings = GoogleGenerativeAIEmbeddings(
        model="models/embedding-001")  # type: ignore

    new_db = FAISS.load_local("faiss_index", embeddings)
    docs = new_db.similarity_search(user_question)

    chain = get_conversational_chain()

    response = chain(
        {"input_documents": docs, "question": user_question}, return_only_outputs=True, )

    print(response)
    return response


def main():
    st.set_page_config(
        page_title="Gemini PDF Chatbot",
        page_icon="ü§ñ"
    )

    # Sidebar for uploading PDF files
    with st.sidebar:
        st.title("Menu:")
        pdf_docs = st.file_uploader(
            "Upload PDF Files v√† Click v√†o Submit Submit & N√∫t Process", accept_multiple_files=True)
        if st.button("Submit & Process"):
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                raw_text = get_pdf_text(pdf_docs)
                text_chunks = get_text_chunks(raw_text)
                get_vector_store(text_chunks)
                st.success("Done")

    # Main content area for displaying chat messages
    st.title("H·ªèi t·∫•t t·∫ßn t·∫≠t v·ªõi file PDF b·∫±ng Geminiü§ñ")
    st.write("Ch√†o m·ª´ng ƒë·∫øn CocoSystem Chatbot")
    st.sidebar.button('X√≥a l·ªãch s·ª≠ Chat', on_click=clear_chat_history)

    # Chat input
    # Placeholder for chat messages

    if "messages" not in st.session_state.keys():
        st.session_state.messages = [
            {"role": "assistant", "content": "upload some pdfs and ask me a question"}]

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.write(message["content"])

    if prompt := st.chat_input():
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.write(prompt)

    # Display chat messages and bot response
    if st.session_state.messages[-1]["role"] != "assistant":
        with st.chat_message("assistant"):
            with st.spinner("Thinking..."):
                response = user_input(prompt)
                placeholder = st.empty()
                full_response = ''
                for item in response['output_text']:
                    full_response += item
                    placeholder.markdown(full_response)
                placeholder.markdown(full_response)
        if response is not None:
            message = {"role": "assistant", "content": full_response}
            st.session_state.messages.append(message)


if __name__ == "__main__":
    main()
